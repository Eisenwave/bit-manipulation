function bool_to_int(x: Bool) -> Int {
    return 1 if x else 0;
}

static_assert(bool_to_int(false) == 0);
static_assert(bool_to_int(true) == 1);

function log10(x: Int) -> Int {
    return 0 if x < 10
      else 1 if x < 100
      else 2 if x < 1000
      else 3 if x < 10000
      else 4 if x < 100000
      else 5;
}

static_assert(log10(0) == 0);
static_assert(log10(1) == 0);
static_assert(log10(2) == 0);
static_assert(log10(3) == 0);
static_assert(log10(4) == 0);
static_assert(log10(5) == 0);
static_assert(log10(6) == 0);
static_assert(log10(7) == 0);
static_assert(log10(8) == 0);
static_assert(log10(9) == 0);

static_assert(log10(10) == 1);
static_assert(log10(20) == 1);
static_assert(log10(50) == 1);
static_assert(log10(99) == 1);

static_assert(log10(100) == 2);
static_assert(log10(200) == 2);
static_assert(log10(999) == 2);

static_assert(log10(1000) == 3);

static_assert(log10(10000) == 4);
static_assert(log10(100000) == 5);

function log10_2(x: Int) -> Int {
    if (x < 10) { return 0; }
    else if (x < 100) { return 1; }
    else if (x < 1000) { return 2; }
    else if (x < 10000) { return 3; }
    else if (x < 100000) { return 4; }
    else { return 5; }
}

static_assert(log10_2(0) == 0);
static_assert(log10_2(1) == 0);
static_assert(log10_2(2) == 0);
static_assert(log10_2(3) == 0);
static_assert(log10_2(4) == 0);
static_assert(log10_2(5) == 0);
static_assert(log10_2(6) == 0);
static_assert(log10_2(7) == 0);
static_assert(log10_2(8) == 0);
static_assert(log10_2(9) == 0);

static_assert(log10_2(10) == 1);
static_assert(log10_2(20) == 1);
static_assert(log10_2(50) == 1);
static_assert(log10_2(99) == 1);

static_assert(log10_2(100) == 2);
static_assert(log10_2(200) == 2);
static_assert(log10_2(999) == 2);

static_assert(log10_2(1000) == 3);

static_assert(log10_2(10000) == 4);
static_assert(log10_2(100000) == 5);


function log10_3(x: Int) -> Int {
    if (x < 10) { return 0; }
    if (x < 100) { return 1; }
    if (x < 1000) { return 2; }
    if (x < 10000) { return 3; }
    if (x < 100000) { return 4; }
    return 5;
}

static_assert(log10_3(0) == 0);
static_assert(log10_3(1) == 0);
static_assert(log10_3(2) == 0);
static_assert(log10_3(3) == 0);
static_assert(log10_3(4) == 0);
static_assert(log10_3(5) == 0);
static_assert(log10_3(6) == 0);
static_assert(log10_3(7) == 0);
static_assert(log10_3(8) == 0);
static_assert(log10_3(9) == 0);

static_assert(log10_3(10) == 1);
static_assert(log10_3(20) == 1);
static_assert(log10_3(50) == 1);
static_assert(log10_3(99) == 1);

static_assert(log10_3(100) == 2);
static_assert(log10_3(200) == 2);
static_assert(log10_3(999) == 2);

static_assert(log10_3(1000) == 3);

static_assert(log10_3(10000) == 4);
static_assert(log10_3(100000) == 5);



function log10_4(x: Int) -> Int {
    let result = 0;
    let t = x / 10;
    while t != 0 {
        result = result + 1;
        t = t / 10;
    }
    return result;
}

static_assert(log10_4(0) == 0);
static_assert(log10_4(1) == 0);
static_assert(log10_4(2) == 0);
static_assert(log10_4(3) == 0);
static_assert(log10_4(4) == 0);
static_assert(log10_4(5) == 0);
static_assert(log10_4(6) == 0);
static_assert(log10_4(7) == 0);
static_assert(log10_4(8) == 0);
static_assert(log10_4(9) == 0);

static_assert(log10_4(10) == 1);
static_assert(log10_4(20) == 1);
static_assert(log10_4(50) == 1);
static_assert(log10_4(99) == 1);

static_assert(log10_4(100) == 2);
static_assert(log10_4(200) == 2);
static_assert(log10_4(999) == 2);

static_assert(log10_4(1000) == 3);

static_assert(log10_4(10000) == 4);
static_assert(log10_4(100000) == 5);
